[
  {
    "id": 1,
    "blog_image": "https://rb.gy/w6j44",
    "title": "The differences between uncontrolled and controlled components",
    "reading_time": "5 min read",
    "date": "2022-01-01",
    "author": "John Doe",
    "author_image": "https://rb.gy/6mja9",
    "like": 150,
    "description": "In React, controlled components are those whose value is controlled by React, while uncontrolled components are those whose value is controlled by the DOM. Controlled components are easier to validate and prevent unwanted user input, while uncontrolled components are useful when the user input is not critical and can be easily reset."
  },
  {
    "id": 2,
    "blog_image": "https://rb.gy/2o9v2",
    "title": "How to validate React props using PropTypes",
    "reading_time": "4 min read",
    "date": "2022-02-15",
    "author": "Jane Smith",
    "author_image": "https://rb.gy/6mja9",
    "like": 100,
    "description": "PropTypes is a built-in library in React that allows us to validate the data types of our component's props. I can specify the expected data type, and PropTypes will throw a warning if the data type doesn't match. This helps catch bugs and ensure that your component receives the correct data types."
  },
  {
    "id": 3,
    "blog_image": "https://rb.gy/2oaha",
    "title": "The difference between Node.js and Express.js",
    "reading_time": "6 min read",
    "date": "2022-03-20",
    "author": "Bob Johnson",
    "author_image": "https://rb.gy/n3phs",
    "like": 75,
    "description": "Node.js is a server-side JavaScript runtime environment, while Express.js is a web application framework built on top of Node.js. Node.js allows us to execute JavaScript code outside of a web browser, while Express.js simplifies the process of building web applications by providing pre-built functionality and middleware."
  },
  {
    "id": 4,
    "blog_image": "https://rb.gy/lxpx0",
    "title": "What is a custom hook, and why will you create a custom hook?",
    "reading_time": "7 min read",
    "date": "2022-04-10",
    "author": "Sarah Lee",
    "author_image": "https://rb.gy/6apgk",
    "like": 200,
    "description": "Custom hooks are reusable logic functions that allow us to extract common functionality from our React components. I can create custom hooks to encapsulate complex logic, make my code more modular, and reduce repetition. For example, I might create a custom hook to handle API calls or form validation logic."
  }
]
